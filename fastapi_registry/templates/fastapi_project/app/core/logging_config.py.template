"""Centralized logging configuration."""

import logging
import sys
from typing import List

from app.core.config import settings


def suppress_third_party_logs() -> None:
    """Suppress verbose logging from third-party libraries."""
    logging.getLogger("urllib3").setLevel(logging.WARNING)
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("requests").setLevel(logging.WARNING)
    logging.getLogger("sqlalchemy.engine").setLevel(logging.WARNING)
    logging.getLogger("uvicorn.access").setLevel(logging.WARNING)


def configure_logging() -> None:
    """
    Configure application-wide logging settings.

    Sets up log level, format, and handlers based on environment.
    """
    # Determine log level based on environment
    log_level = logging.INFO
    if settings.debug:
        log_level = logging.DEBUG

    # Configure handlers
    handlers: List[logging.Handler] = [
        logging.StreamHandler(sys.stdout),
    ]

    # Add file handler for production if needed
    # if settings.environment == "production":
    #     handlers.append(
    #         logging.FileHandler("/var/log/{project_name}/app.log", encoding="utf-8")
    #     )

    # Configure logging
    logging.basicConfig(
        level=log_level,
        format="%(asctime)s | %(name)-22s | %(levelname)-7s | %(message)s",
        handlers=handlers,
    )

    # Suppress noisy third-party logs
    suppress_third_party_logs()


class ServiceLogger:
    """
    Standardized logger for services with consistent formatting patterns.

    Example:
        logger = ServiceLogger("auth_service")
        logger.info("User logged in", user_id="123")
        logger.error("Login failed", error=exc, email="user@example.com")
    """

    def __init__(self, service_name: str):
        """
        Initialize service logger.

        Args:
            service_name: Name of the service (used as logger name)
        """
        self.service_name = service_name
        self.logger = logging.getLogger(service_name)

    def _format_message(self, level_prefix: str, message: str, **kwargs) -> str:
        """
        Format log message with service prefix and optional context.

        Args:
            level_prefix: Prefix for log level (e.g., "ERROR:", "WARNING:")
            message: Main log message
            **kwargs: Additional context to include in log

        Returns:
            Formatted log message
        """
        formatted_msg = f"{level_prefix} {message}"
        if kwargs:
            formatted_msg += f" | Context: {kwargs}"
        return formatted_msg

    def info(self, message: str, **kwargs) -> None:
        """
        Log info message with service prefix.

        Args:
            message: Log message
            **kwargs: Additional context
        """
        formatted_msg = self._format_message("", message, **kwargs)
        self.logger.info(formatted_msg)

    def error(
        self, message: str, error: Exception | None = None, **kwargs
    ) -> None:
        """
        Log error message with service prefix and optional exception details.

        Args:
            message: Log message
            error: Exception object (if any)
            **kwargs: Additional context
        """
        formatted_msg = self._format_message("ERROR:", message, **kwargs)
        if error:
            formatted_msg += f" | Exception: {str(error)}"
        self.logger.error(formatted_msg, exc_info=error is not None)

    def warning(self, message: str, **kwargs) -> None:
        """
        Log warning message with service prefix.

        Args:
            message: Log message
            **kwargs: Additional context
        """
        formatted_msg = self._format_message("WARNING:", message, **kwargs)
        self.logger.warning(formatted_msg)

    def debug(self, message: str, **kwargs) -> None:
        """
        Log debug message with service prefix.

        Args:
            message: Log message
            **kwargs: Additional context
        """
        formatted_msg = self._format_message("DEBUG:", message, **kwargs)
        self.logger.debug(formatted_msg)


def get_service_logger(service_name: str) -> ServiceLogger:
    """
    Get a standardized logger for a service.

    Args:
        service_name: Name of the service

    Returns:
        ServiceLogger instance
    """
    return ServiceLogger(service_name)
