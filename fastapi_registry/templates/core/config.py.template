"""Application configuration using Pydantic Settings."""

from enum import Enum
from functools import lru_cache
from typing import Literal

from pydantic import Field, field_validator
from pydantic_settings import BaseSettings, SettingsConfigDict


class Environment(str, Enum):
    """Application environment."""

    LOCAL = "local"
    DEVELOPMENT = "development"
    TEST = "test"
    PRODUCTION = "production"


class Settings(BaseSettings):
    """
    Main application settings.

    All settings can be overridden via environment variables.
    """

    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        case_sensitive=False,
        extra="ignore",
    )

    # Application Settings
    app_name: str = Field(default="{{ project_name }}", description="Application name")
    environment: Environment = Field(
        default=Environment.DEVELOPMENT, description="Application environment"
    )
    debug: bool = Field(default=False, description="Debug mode")
    version: str = Field(default="0.1.1", description="Application version")

    # Server Settings
    host: str = Field(default="0.0.0.0", description="Server host")
    port: int = Field(default=8000, description="Server port")
    reload: bool = Field(default=True, description="Auto-reload on code changes")

    # CORS Settings
    cors_origins: list[str] = Field(
        default=["http://localhost:3000"],
        description="Allowed CORS origins (comma-separated)",
    )
    cors_credentials: bool = Field(default=True, description="Allow credentials")
    cors_methods: list[str] = Field(default=["*"], description="Allowed HTTP methods")
    cors_headers: list[str] = Field(default=["*"], description="Allowed HTTP headers")

    # Database Settings
    database_url: str = Field(
        default="sqlite+aiosqlite:///./data/app.db",
        description="Database connection URL",
    )
    database_pool_size: int = Field(default=5, description="Database pool size")
    database_max_overflow: int = Field(
        default=10, description="Max database connections overflow"
    )
    database_pool_recycle: int = Field(
        default=3600, description="Database pool recycle time (seconds)"
    )
    database_echo: bool = Field(default=False, description="Echo SQL queries")

    # JWT Settings (if auth module is added)
    secret_key: str = Field(
        default="change-me-in-production-min-32-chars!",
        description="Secret key for JWT",
    )
    jwt_algorithm: str = Field(default="HS256", description="JWT algorithm")
    access_token_expire_minutes: int = Field(
        default=30, description="Access token expiration (minutes)"
    )
    refresh_token_expire_days: int = Field(
        default=7, description="Refresh token expiration (days)"
    )

    # Logging Settings
    log_level: Literal["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"] = Field(
        default="INFO", description="Logging level"
    )
    log_format: str = Field(
        default="%(asctime)s | %(name)s | %(levelname)s | %(message)s",
        description="Log format",
    )
    log_file: str | None = Field(default=None, description="Log file path")

    # Rate Limiting
    rate_limit_enabled: bool = Field(default=True, description="Enable rate limiting")
    rate_limit_per_minute: int = Field(
        default=60, description="Default rate limit per minute"
    )

    @field_validator("secret_key")
    @classmethod
    def validate_secret_key(cls, v: str, info) -> str:
        """Validate secret key in production."""
        if info.data.get("environment") == Environment.PRODUCTION:
            if len(v) < 32:
                raise ValueError("Secret key must be at least 32 characters in production")
            if v == "change-me-in-production-min-32-chars!":
                raise ValueError("Must change default secret key in production")
        return v

    def is_development(self) -> bool:
        """Check if running in development mode."""
        return self.environment in (Environment.LOCAL, Environment.DEVELOPMENT)

    def is_production(self) -> bool:
        """Check if running in production mode."""
        return self.environment == Environment.PRODUCTION

    def is_test(self) -> bool:
        """Check if running in test mode."""
        return self.environment == Environment.TEST


@lru_cache
def get_settings() -> Settings:
    """Get cached settings instance."""
    return Settings()


# Global settings instance
settings = get_settings()
